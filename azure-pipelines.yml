# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
      - master
      - develop
      - azure

pool:
  vmImage: 'macOS-latest'

variables:
- name: GRADLE_USER_HOME
  value: $(Pipeline.Workspace)/.gradle
- name: isMasterBranch
  value: $[ startsWith(variables['Build.SourceBranch'], 'refs/heads/master') ]

steps:
- script: echo Hello, world!
  displayName: 'Run tradedoubler'

- task: Cache@2
  inputs:
    key: 'gradle | "$(Agent.OS)" | app/build.gradle'
    restoreKeys: gradle
    path: $(GRADLE_USER_HOME)
  condition: eq ( variables['isReleaseCandidate'], 'False' )
  displayName: Gradle build cache

- task: Bash@3
  displayName: 'Starting AVD'
  inputs:
    targetType: 'inline'
    script: |
        #!/usr/bin/env bash
          echo "Installing emulator"
  
          # Ensure Android SDK tools are updated
          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --update
  
          # Install AVD files
          echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-28;google_apis_playstore;x86'
  
          # Create the emulator
          echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n xamarin_android_emulator -k 'system-images;android-28;google_apis_playstore;x86' --force
  
          # Start the emulator in the background
          nohup $ANDROID_HOME/emulator/emulator -avd xamarin_android_emulator -no-window -no-audio -no-boot-anim &
  
          # Wait for the emulator to start
          echo "Waiting for emulator to start..."
          $ANDROID_HOME/platform-tools/adb wait-for-device
  
          echo "Emulator started successfully"

- task: Gradle@2
  displayName: 'Build and test sdk'
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'assemble connectedAndroidTest'